=begin
#Aspose.Imaging Cloud API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.5

=end

require 'uri'

module AsposeImagingCloud
  class ImagingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add image and images features to search context. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param search_context_id Search context identifier.
    # @param image_id Image identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image_data Input image
    # @option opts [String] :folder Folder.
    # @option opts [String] :storage Storage
    # @return [nil]
    def add_search_image(search_context_id, image_id, opts = {})
      add_search_image_with_http_info(search_context_id, image_id, opts)
      nil
    end

    # Add image and images features to search context. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param search_context_id Search context identifier.
    # @param image_id Image identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image_data Input image
    # @option opts [String] :folder Folder.
    # @option opts [String] :storage Storage
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_search_image_with_http_info(search_context_id, image_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.add_search_image ...'
      end
      # verify the required parameter 'search_context_id' is set
      if @api_client.config.client_side_validation && search_context_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_context_id' when calling ImagingApi.add_search_image"
      end
      # verify the required parameter 'image_id' is set
      if @api_client.config.client_side_validation && image_id.nil?
        fail ArgumentError, "Missing the required parameter 'image_id' when calling ImagingApi.add_search_image"
      end
      # resource path
      local_var_path = '/imaging/ai/imageSearch/{searchContextId}/image'.sub('{' + 'searchContextId' + '}', search_context_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'imageId'] = image_id
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = opts[:'image_data'] if !opts[:'image_data'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#add_search_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Appends existing TIFF image to another existing TIFF image (i.e. merges TIFF images).
    # @param name Original image file name.
    # @param append_file Image file name to be appended to original one.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @option opts [String] :folder Folder with images to process.
    # @return [nil]
    def append_tiff(name, append_file, opts = {})
      append_tiff_with_http_info(name, append_file, opts)
      nil
    end

    # Appends existing TIFF image to another existing TIFF image (i.e. merges TIFF images).
    # @param name Original image file name.
    # @param append_file Image file name to be appended to original one.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @option opts [String] :folder Folder with images to process.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def append_tiff_with_http_info(name, append_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.append_tiff ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ImagingApi.append_tiff"
      end
      # verify the required parameter 'append_file' is set
      if @api_client.config.client_side_validation && append_file.nil?
        fail ArgumentError, "Missing the required parameter 'append_file' when calling ImagingApi.append_tiff"
      end
      # resource path
      local_var_path = '/imaging/tiff/{name}/appendTiff'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'appendFile'] = append_file
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#append_tiff\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Compare two images. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param search_context_id The search context identifier.
    # @param image_id1 The first image Id in storage.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image_data Input image
    # @option opts [String] :image_id2 The second image Id in storage or null (if image loading in request).
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [SearchResultsSet]
    def compare_images(search_context_id, image_id1, opts = {})
      data, _status_code, _headers = compare_images_with_http_info(search_context_id, image_id1, opts)
      data
    end

    # Compare two images. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param search_context_id The search context identifier.
    # @param image_id1 The first image Id in storage.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image_data Input image
    # @option opts [String] :image_id2 The second image Id in storage or null (if image loading in request).
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [Array<(SearchResultsSet, Fixnum, Hash)>] SearchResultsSet data, response status code and response headers
    def compare_images_with_http_info(search_context_id, image_id1, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.compare_images ...'
      end
      # verify the required parameter 'search_context_id' is set
      if @api_client.config.client_side_validation && search_context_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_context_id' when calling ImagingApi.compare_images"
      end
      # verify the required parameter 'image_id1' is set
      if @api_client.config.client_side_validation && image_id1.nil?
        fail ArgumentError, "Missing the required parameter 'image_id1' when calling ImagingApi.compare_images"
      end
      # resource path
      local_var_path = '/imaging/ai/imageSearch/{searchContextId}/compare'.sub('{' + 'searchContextId' + '}', search_context_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'imageId1'] = image_id1
      query_params[:'imageId2'] = opts[:'image_id2'] if !opts[:'image_id2'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = opts[:'image_data'] if !opts[:'image_data'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SearchResultsSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#compare_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update parameters of existing TIFF image accordingly to fax parameters.
    # @param name Filename of image.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @option opts [String] :folder Folder with image to process.
    # @return [File]
    def convert_tiff_to_fax(name, opts = {})
      data, _status_code, _headers = convert_tiff_to_fax_with_http_info(name, opts)
      data
    end

    # Update parameters of existing TIFF image accordingly to fax parameters.
    # @param name Filename of image.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @option opts [String] :folder Folder with image to process.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def convert_tiff_to_fax_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.convert_tiff_to_fax ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ImagingApi.convert_tiff_to_fax"
      end
      # resource path
      local_var_path = '/imaging/tiff/{name}/toFax'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#convert_tiff_to_fax\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Copy file
    # @param src_path Source file path e.g. &#39;/folder/file.ext&#39;
    # @param dest_path Destination file path
    # @param [Hash] opts the optional parameters
    # @option opts [String] :src_storage_name Source storage name
    # @option opts [String] :dest_storage_name Destination storage name
    # @option opts [String] :version_id File version ID to copy
    # @return [nil]
    def copy_file(src_path, dest_path, opts = {})
      copy_file_with_http_info(src_path, dest_path, opts)
      nil
    end

    # Copy file
    # @param src_path Source file path e.g. &#39;/folder/file.ext&#39;
    # @param dest_path Destination file path
    # @param [Hash] opts the optional parameters
    # @option opts [String] :src_storage_name Source storage name
    # @option opts [String] :dest_storage_name Destination storage name
    # @option opts [String] :version_id File version ID to copy
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def copy_file_with_http_info(src_path, dest_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.copy_file ...'
      end
      # verify the required parameter 'src_path' is set
      if @api_client.config.client_side_validation && src_path.nil?
        fail ArgumentError, "Missing the required parameter 'src_path' when calling ImagingApi.copy_file"
      end
      # verify the required parameter 'dest_path' is set
      if @api_client.config.client_side_validation && dest_path.nil?
        fail ArgumentError, "Missing the required parameter 'dest_path' when calling ImagingApi.copy_file"
      end
      # resource path
      local_var_path = '/imaging/storage/file/copy/{srcPath}'.sub('{' + 'srcPath' + '}', src_path.to_s)

      # query parameters
      query_params = {}
      query_params[:'destPath'] = dest_path
      query_params[:'srcStorageName'] = opts[:'src_storage_name'] if !opts[:'src_storage_name'].nil?
      query_params[:'destStorageName'] = opts[:'dest_storage_name'] if !opts[:'dest_storage_name'].nil?
      query_params[:'versionId'] = opts[:'version_id'] if !opts[:'version_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#copy_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Copy folder
    # @param src_path Source folder path e.g. &#39;/src&#39;
    # @param dest_path Destination folder path e.g. &#39;/dst&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :src_storage_name Source storage name
    # @option opts [String] :dest_storage_name Destination storage name
    # @return [nil]
    def copy_folder(src_path, dest_path, opts = {})
      copy_folder_with_http_info(src_path, dest_path, opts)
      nil
    end

    # Copy folder
    # @param src_path Source folder path e.g. &#39;/src&#39;
    # @param dest_path Destination folder path e.g. &#39;/dst&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :src_storage_name Source storage name
    # @option opts [String] :dest_storage_name Destination storage name
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def copy_folder_with_http_info(src_path, dest_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.copy_folder ...'
      end
      # verify the required parameter 'src_path' is set
      if @api_client.config.client_side_validation && src_path.nil?
        fail ArgumentError, "Missing the required parameter 'src_path' when calling ImagingApi.copy_folder"
      end
      # verify the required parameter 'dest_path' is set
      if @api_client.config.client_side_validation && dest_path.nil?
        fail ArgumentError, "Missing the required parameter 'dest_path' when calling ImagingApi.copy_folder"
      end
      # resource path
      local_var_path = '/imaging/storage/folder/copy/{srcPath}'.sub('{' + 'srcPath' + '}', src_path.to_s)

      # query parameters
      query_params = {}
      query_params[:'destPath'] = dest_path
      query_params[:'srcStorageName'] = opts[:'src_storage_name'] if !opts[:'src_storage_name'].nil?
      query_params[:'destStorageName'] = opts[:'dest_storage_name'] if !opts[:'dest_storage_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#copy_folder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Crop an image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
    # @param x X position of start point for cropping rectangle.
    # @param y Y position of start point for cropping rectangle.
    # @param width Width of cropping rectangle.
    # @param height Height of cropping rectangle.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def create_cropped_image(image_data, format, x, y, width, height, opts = {})
      data, _status_code, _headers = create_cropped_image_with_http_info(image_data, format, x, y, width, height, opts)
      data
    end

    # Crop an image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
    # @param x X position of start point for cropping rectangle.
    # @param y Y position of start point for cropping rectangle.
    # @param width Width of cropping rectangle.
    # @param height Height of cropping rectangle.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def create_cropped_image_with_http_info(image_data, format, x, y, width, height, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.create_cropped_image ...'
      end
      # verify the required parameter 'image_data' is set
      if @api_client.config.client_side_validation && image_data.nil?
        fail ArgumentError, "Missing the required parameter 'image_data' when calling ImagingApi.create_cropped_image"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling ImagingApi.create_cropped_image"
      end
      # verify the required parameter 'x' is set
      if @api_client.config.client_side_validation && x.nil?
        fail ArgumentError, "Missing the required parameter 'x' when calling ImagingApi.create_cropped_image"
      end
      # verify the required parameter 'y' is set
      if @api_client.config.client_side_validation && y.nil?
        fail ArgumentError, "Missing the required parameter 'y' when calling ImagingApi.create_cropped_image"
      end
      # verify the required parameter 'width' is set
      if @api_client.config.client_side_validation && width.nil?
        fail ArgumentError, "Missing the required parameter 'width' when calling ImagingApi.create_cropped_image"
      end
      # verify the required parameter 'height' is set
      if @api_client.config.client_side_validation && height.nil?
        fail ArgumentError, "Missing the required parameter 'height' when calling ImagingApi.create_cropped_image"
      end
      # resource path
      local_var_path = '/imaging/crop'

      # query parameters
      query_params = {}
      query_params[:'format'] = format
      query_params[:'x'] = x
      query_params[:'y'] = y
      query_params[:'width'] = width
      query_params[:'height'] = height
      query_params[:'outPath'] = opts[:'out_path'] if !opts[:'out_path'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = image_data

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#create_cropped_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create the folder
    # @param path Folder path to create e.g. &#39;folder_1/folder_2/&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @return [nil]
    def create_folder(path, opts = {})
      create_folder_with_http_info(path, opts)
      nil
    end

    # Create the folder
    # @param path Folder path to create e.g. &#39;folder_1/folder_2/&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_folder_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.create_folder ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ImagingApi.create_folder"
      end
      # resource path
      local_var_path = '/imaging/storage/folder/{path}'.sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = {}
      query_params[:'storageName'] = opts[:'storage_name'] if !opts[:'storage_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#create_folder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Extract images features and add them to search context. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param search_context_id The search context identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image_data Input image
    # @option opts [String] :image_id The image identifier.
    # @option opts [String] :images_folder Images folder.
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [nil]
    def create_image_features(search_context_id, opts = {})
      create_image_features_with_http_info(search_context_id, opts)
      nil
    end

    # Extract images features and add them to search context. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param search_context_id The search context identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image_data Input image
    # @option opts [String] :image_id The image identifier.
    # @option opts [String] :images_folder Images folder.
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_image_features_with_http_info(search_context_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.create_image_features ...'
      end
      # verify the required parameter 'search_context_id' is set
      if @api_client.config.client_side_validation && search_context_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_context_id' when calling ImagingApi.create_image_features"
      end
      # resource path
      local_var_path = '/imaging/ai/imageSearch/{searchContextId}/features'.sub('{' + 'searchContextId' + '}', search_context_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'imageId'] = opts[:'image_id'] if !opts[:'image_id'].nil?
      query_params[:'imagesFolder'] = opts[:'images_folder'] if !opts[:'images_folder'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = opts[:'image_data'] if !opts[:'image_data'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#create_image_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get separate frame from existing TIFF image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param frame_id Number of a frame.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :new_width New width.
    # @option opts [Integer] :new_height New height.
    # @option opts [Integer] :x X position of start point for cropping rectangle.
    # @option opts [Integer] :y Y position of start point for cropping rectangle.
    # @option opts [Integer] :rect_width Width of cropping rectangle.
    # @option opts [Integer] :rect_height Height of cropping rectangle.
    # @option opts [String] :rotate_flip_method RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY). Default is RotateNoneFlipNone.
    # @option opts [BOOLEAN] :save_other_frames If result will include all other frames or just a specified frame. (default to false)
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def create_image_frame(image_data, frame_id, opts = {})
      data, _status_code, _headers = create_image_frame_with_http_info(image_data, frame_id, opts)
      data
    end

    # Get separate frame from existing TIFF image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param frame_id Number of a frame.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :new_width New width.
    # @option opts [Integer] :new_height New height.
    # @option opts [Integer] :x X position of start point for cropping rectangle.
    # @option opts [Integer] :y Y position of start point for cropping rectangle.
    # @option opts [Integer] :rect_width Width of cropping rectangle.
    # @option opts [Integer] :rect_height Height of cropping rectangle.
    # @option opts [String] :rotate_flip_method RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY). Default is RotateNoneFlipNone.
    # @option opts [BOOLEAN] :save_other_frames If result will include all other frames or just a specified frame.
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def create_image_frame_with_http_info(image_data, frame_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.create_image_frame ...'
      end
      # verify the required parameter 'image_data' is set
      if @api_client.config.client_side_validation && image_data.nil?
        fail ArgumentError, "Missing the required parameter 'image_data' when calling ImagingApi.create_image_frame"
      end
      # verify the required parameter 'frame_id' is set
      if @api_client.config.client_side_validation && frame_id.nil?
        fail ArgumentError, "Missing the required parameter 'frame_id' when calling ImagingApi.create_image_frame"
      end
      # resource path
      local_var_path = '/imaging/frames/{frameId}'.sub('{' + 'frameId' + '}', frame_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'newWidth'] = opts[:'new_width'] if !opts[:'new_width'].nil?
      query_params[:'newHeight'] = opts[:'new_height'] if !opts[:'new_height'].nil?
      query_params[:'x'] = opts[:'x'] if !opts[:'x'].nil?
      query_params[:'y'] = opts[:'y'] if !opts[:'y'].nil?
      query_params[:'rectWidth'] = opts[:'rect_width'] if !opts[:'rect_width'].nil?
      query_params[:'rectHeight'] = opts[:'rect_height'] if !opts[:'rect_height'].nil?
      query_params[:'rotateFlipMethod'] = opts[:'rotate_flip_method'] if !opts[:'rotate_flip_method'].nil?
      query_params[:'saveOtherFrames'] = opts[:'save_other_frames'] if !opts[:'save_other_frames'].nil?
      query_params[:'outPath'] = opts[:'out_path'] if !opts[:'out_path'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = image_data

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#create_image_frame\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create new search context.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :detector The image features detector. (default to akaze)
    # @option opts [String] :matching_algorithm The matching algorithm. (default to randomBinaryTree)
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [SearchContextStatus]
    def create_image_search(opts = {})
      data, _status_code, _headers = create_image_search_with_http_info(opts)
      data
    end

    # Create new search context.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :detector The image features detector.
    # @option opts [String] :matching_algorithm The matching algorithm.
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [Array<(SearchContextStatus, Fixnum, Hash)>] SearchContextStatus data, response status code and response headers
    def create_image_search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.create_image_search ...'
      end
      # resource path
      local_var_path = '/imaging/ai/imageSearch/create'

      # query parameters
      query_params = {}
      query_params[:'detector'] = opts[:'detector'] if !opts[:'detector'].nil?
      query_params[:'matchingAlgorithm'] = opts[:'matching_algorithm'] if !opts[:'matching_algorithm'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SearchContextStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#create_image_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add tag and reference image to search context. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param search_context_id The search context identifier.
    # @param tag_name The tag.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [nil]
    def create_image_tag(image_data, search_context_id, tag_name, opts = {})
      create_image_tag_with_http_info(image_data, search_context_id, tag_name, opts)
      nil
    end

    # Add tag and reference image to search context. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param search_context_id The search context identifier.
    # @param tag_name The tag.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_image_tag_with_http_info(image_data, search_context_id, tag_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.create_image_tag ...'
      end
      # verify the required parameter 'image_data' is set
      if @api_client.config.client_side_validation && image_data.nil?
        fail ArgumentError, "Missing the required parameter 'image_data' when calling ImagingApi.create_image_tag"
      end
      # verify the required parameter 'search_context_id' is set
      if @api_client.config.client_side_validation && search_context_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_context_id' when calling ImagingApi.create_image_tag"
      end
      # verify the required parameter 'tag_name' is set
      if @api_client.config.client_side_validation && tag_name.nil?
        fail ArgumentError, "Missing the required parameter 'tag_name' when calling ImagingApi.create_image_tag"
      end
      # resource path
      local_var_path = '/imaging/ai/imageSearch/{searchContextId}/addTag'.sub('{' + 'searchContextId' + '}', search_context_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'tagName'] = tag_name
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = image_data

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#create_image_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update parameters of BMP image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param bits_per_pixel Color depth.
    # @param horizontal_resolution New horizontal resolution.
    # @param vertical_resolution New vertical resolution.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def create_modified_bmp(image_data, bits_per_pixel, horizontal_resolution, vertical_resolution, opts = {})
      data, _status_code, _headers = create_modified_bmp_with_http_info(image_data, bits_per_pixel, horizontal_resolution, vertical_resolution, opts)
      data
    end

    # Update parameters of BMP image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param bits_per_pixel Color depth.
    # @param horizontal_resolution New horizontal resolution.
    # @param vertical_resolution New vertical resolution.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def create_modified_bmp_with_http_info(image_data, bits_per_pixel, horizontal_resolution, vertical_resolution, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.create_modified_bmp ...'
      end
      # verify the required parameter 'image_data' is set
      if @api_client.config.client_side_validation && image_data.nil?
        fail ArgumentError, "Missing the required parameter 'image_data' when calling ImagingApi.create_modified_bmp"
      end
      # verify the required parameter 'bits_per_pixel' is set
      if @api_client.config.client_side_validation && bits_per_pixel.nil?
        fail ArgumentError, "Missing the required parameter 'bits_per_pixel' when calling ImagingApi.create_modified_bmp"
      end
      # verify the required parameter 'horizontal_resolution' is set
      if @api_client.config.client_side_validation && horizontal_resolution.nil?
        fail ArgumentError, "Missing the required parameter 'horizontal_resolution' when calling ImagingApi.create_modified_bmp"
      end
      # verify the required parameter 'vertical_resolution' is set
      if @api_client.config.client_side_validation && vertical_resolution.nil?
        fail ArgumentError, "Missing the required parameter 'vertical_resolution' when calling ImagingApi.create_modified_bmp"
      end
      # resource path
      local_var_path = '/imaging/bmp'

      # query parameters
      query_params = {}
      query_params[:'bitsPerPixel'] = bits_per_pixel
      query_params[:'horizontalResolution'] = horizontal_resolution
      query_params[:'verticalResolution'] = vertical_resolution
      query_params[:'fromScratch'] = opts[:'from_scratch'] if !opts[:'from_scratch'].nil?
      query_params[:'outPath'] = opts[:'out_path'] if !opts[:'out_path'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = image_data

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#create_modified_bmp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Process existing EMF imaging using given parameters. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param bk_color Color of the background.
    # @param page_width Width of the page.
    # @param page_height Height of the page.
    # @param border_x Border width.
    # @param border_y Border height.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @option opts [String] :format Export format (PNG is the default one). Please, refer to the export table from https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases. (default to png)
    # @return [File]
    def create_modified_emf(image_data, bk_color, page_width, page_height, border_x, border_y, opts = {})
      data, _status_code, _headers = create_modified_emf_with_http_info(image_data, bk_color, page_width, page_height, border_x, border_y, opts)
      data
    end

    # Process existing EMF imaging using given parameters. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param bk_color Color of the background.
    # @param page_width Width of the page.
    # @param page_height Height of the page.
    # @param border_x Border width.
    # @param border_y Border height.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @option opts [String] :format Export format (PNG is the default one). Please, refer to the export table from https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def create_modified_emf_with_http_info(image_data, bk_color, page_width, page_height, border_x, border_y, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.create_modified_emf ...'
      end
      # verify the required parameter 'image_data' is set
      if @api_client.config.client_side_validation && image_data.nil?
        fail ArgumentError, "Missing the required parameter 'image_data' when calling ImagingApi.create_modified_emf"
      end
      # verify the required parameter 'bk_color' is set
      if @api_client.config.client_side_validation && bk_color.nil?
        fail ArgumentError, "Missing the required parameter 'bk_color' when calling ImagingApi.create_modified_emf"
      end
      # verify the required parameter 'page_width' is set
      if @api_client.config.client_side_validation && page_width.nil?
        fail ArgumentError, "Missing the required parameter 'page_width' when calling ImagingApi.create_modified_emf"
      end
      # verify the required parameter 'page_height' is set
      if @api_client.config.client_side_validation && page_height.nil?
        fail ArgumentError, "Missing the required parameter 'page_height' when calling ImagingApi.create_modified_emf"
      end
      # verify the required parameter 'border_x' is set
      if @api_client.config.client_side_validation && border_x.nil?
        fail ArgumentError, "Missing the required parameter 'border_x' when calling ImagingApi.create_modified_emf"
      end
      # verify the required parameter 'border_y' is set
      if @api_client.config.client_side_validation && border_y.nil?
        fail ArgumentError, "Missing the required parameter 'border_y' when calling ImagingApi.create_modified_emf"
      end
      # resource path
      local_var_path = '/imaging/emf'

      # query parameters
      query_params = {}
      query_params[:'bkColor'] = bk_color
      query_params[:'pageWidth'] = page_width
      query_params[:'pageHeight'] = page_height
      query_params[:'borderX'] = border_x
      query_params[:'borderY'] = border_y
      query_params[:'fromScratch'] = opts[:'from_scratch'] if !opts[:'from_scratch'].nil?
      query_params[:'outPath'] = opts[:'out_path'] if !opts[:'out_path'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = image_data

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#create_modified_emf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update parameters of GIF image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :background_color_index Index of the background color. (default to 32)
    # @option opts [Integer] :color_resolution Color resolution. (default to 3)
    # @option opts [BOOLEAN] :has_trailer Specifies if image has trailer. (default to true)
    # @option opts [BOOLEAN] :interlaced Specifies if image is interlaced. (default to true)
    # @option opts [BOOLEAN] :is_palette_sorted Specifies if palette is sorted. (default to false)
    # @option opts [Integer] :pixel_aspect_ratio Pixel aspect ratio. (default to 3)
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to true)
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def create_modified_gif(image_data, opts = {})
      data, _status_code, _headers = create_modified_gif_with_http_info(image_data, opts)
      data
    end

    # Update parameters of GIF image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :background_color_index Index of the background color.
    # @option opts [Integer] :color_resolution Color resolution.
    # @option opts [BOOLEAN] :has_trailer Specifies if image has trailer.
    # @option opts [BOOLEAN] :interlaced Specifies if image is interlaced.
    # @option opts [BOOLEAN] :is_palette_sorted Specifies if palette is sorted.
    # @option opts [Integer] :pixel_aspect_ratio Pixel aspect ratio.
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def create_modified_gif_with_http_info(image_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.create_modified_gif ...'
      end
      # verify the required parameter 'image_data' is set
      if @api_client.config.client_side_validation && image_data.nil?
        fail ArgumentError, "Missing the required parameter 'image_data' when calling ImagingApi.create_modified_gif"
      end
      # resource path
      local_var_path = '/imaging/gif'

      # query parameters
      query_params = {}
      query_params[:'backgroundColorIndex'] = opts[:'background_color_index'] if !opts[:'background_color_index'].nil?
      query_params[:'colorResolution'] = opts[:'color_resolution'] if !opts[:'color_resolution'].nil?
      query_params[:'hasTrailer'] = opts[:'has_trailer'] if !opts[:'has_trailer'].nil?
      query_params[:'interlaced'] = opts[:'interlaced'] if !opts[:'interlaced'].nil?
      query_params[:'isPaletteSorted'] = opts[:'is_palette_sorted'] if !opts[:'is_palette_sorted'].nil?
      query_params[:'pixelAspectRatio'] = opts[:'pixel_aspect_ratio'] if !opts[:'pixel_aspect_ratio'].nil?
      query_params[:'fromScratch'] = opts[:'from_scratch'] if !opts[:'from_scratch'].nil?
      query_params[:'outPath'] = opts[:'out_path'] if !opts[:'out_path'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = image_data

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#create_modified_gif\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update parameters of JPEG image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :quality Quality of an image from 0 to 100. Default is 75. (default to 75)
    # @option opts [String] :compression_type Compression type: baseline (default), progressive, lossless or jpegls. (default to baseline)
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def create_modified_jpeg(image_data, opts = {})
      data, _status_code, _headers = create_modified_jpeg_with_http_info(image_data, opts)
      data
    end

    # Update parameters of JPEG image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :quality Quality of an image from 0 to 100. Default is 75.
    # @option opts [String] :compression_type Compression type: baseline (default), progressive, lossless or jpegls.
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def create_modified_jpeg_with_http_info(image_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.create_modified_jpeg ...'
      end
      # verify the required parameter 'image_data' is set
      if @api_client.config.client_side_validation && image_data.nil?
        fail ArgumentError, "Missing the required parameter 'image_data' when calling ImagingApi.create_modified_jpeg"
      end
      # resource path
      local_var_path = '/imaging/jpg'

      # query parameters
      query_params = {}
      query_params[:'quality'] = opts[:'quality'] if !opts[:'quality'].nil?
      query_params[:'compressionType'] = opts[:'compression_type'] if !opts[:'compression_type'].nil?
      query_params[:'fromScratch'] = opts[:'from_scratch'] if !opts[:'from_scratch'].nil?
      query_params[:'outPath'] = opts[:'out_path'] if !opts[:'out_path'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = image_data

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#create_modified_jpeg\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update parameters of JPEG2000 image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param comment The comment (can be either single or comma-separated).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :codec The codec (j2k or jp2). (default to j2k)
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def create_modified_jpeg2000(image_data, comment, opts = {})
      data, _status_code, _headers = create_modified_jpeg2000_with_http_info(image_data, comment, opts)
      data
    end

    # Update parameters of JPEG2000 image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param comment The comment (can be either single or comma-separated).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :codec The codec (j2k or jp2).
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def create_modified_jpeg2000_with_http_info(image_data, comment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.create_modified_jpeg2000 ...'
      end
      # verify the required parameter 'image_data' is set
      if @api_client.config.client_side_validation && image_data.nil?
        fail ArgumentError, "Missing the required parameter 'image_data' when calling ImagingApi.create_modified_jpeg2000"
      end
      # verify the required parameter 'comment' is set
      if @api_client.config.client_side_validation && comment.nil?
        fail ArgumentError, "Missing the required parameter 'comment' when calling ImagingApi.create_modified_jpeg2000"
      end
      # resource path
      local_var_path = '/imaging/jpg2000'

      # query parameters
      query_params = {}
      query_params[:'comment'] = comment
      query_params[:'codec'] = opts[:'codec'] if !opts[:'codec'].nil?
      query_params[:'fromScratch'] = opts[:'from_scratch'] if !opts[:'from_scratch'].nil?
      query_params[:'outPath'] = opts[:'out_path'] if !opts[:'out_path'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = image_data

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#create_modified_jpeg2000\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update parameters of PSD image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :channels_count Count of color channels. (default to 4)
    # @option opts [String] :compression_method Compression method (for now, raw and RLE are supported). (default to rle)
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def create_modified_psd(image_data, opts = {})
      data, _status_code, _headers = create_modified_psd_with_http_info(image_data, opts)
      data
    end

    # Update parameters of PSD image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :channels_count Count of color channels.
    # @option opts [String] :compression_method Compression method (for now, raw and RLE are supported).
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def create_modified_psd_with_http_info(image_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.create_modified_psd ...'
      end
      # verify the required parameter 'image_data' is set
      if @api_client.config.client_side_validation && image_data.nil?
        fail ArgumentError, "Missing the required parameter 'image_data' when calling ImagingApi.create_modified_psd"
      end
      # resource path
      local_var_path = '/imaging/psd'

      # query parameters
      query_params = {}
      query_params[:'channelsCount'] = opts[:'channels_count'] if !opts[:'channels_count'].nil?
      query_params[:'compressionMethod'] = opts[:'compression_method'] if !opts[:'compression_method'].nil?
      query_params[:'fromScratch'] = opts[:'from_scratch'] if !opts[:'from_scratch'].nil?
      query_params[:'outPath'] = opts[:'out_path'] if !opts[:'out_path'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = image_data

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#create_modified_psd\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update parameters of TIFF image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param bit_depth Bit depth.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :compression Compression (none is default). Please, refer to https://apireference.aspose.com/net/imaging/aspose.imaging.fileformats.tiff.enums/tiffcompressions for all possible values.
    # @option opts [String] :resolution_unit New resolution unit (none - the default one, inch or centimeter).
    # @option opts [Float] :horizontal_resolution New horizontal resolution. (default to 0.0)
    # @option opts [Float] :vertical_resolution New vertical resolution. (default to 0.0)
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def create_modified_tiff(image_data, bit_depth, opts = {})
      data, _status_code, _headers = create_modified_tiff_with_http_info(image_data, bit_depth, opts)
      data
    end

    # Update parameters of TIFF image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param bit_depth Bit depth.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :compression Compression (none is default). Please, refer to https://apireference.aspose.com/net/imaging/aspose.imaging.fileformats.tiff.enums/tiffcompressions for all possible values.
    # @option opts [String] :resolution_unit New resolution unit (none - the default one, inch or centimeter).
    # @option opts [Float] :horizontal_resolution New horizontal resolution.
    # @option opts [Float] :vertical_resolution New vertical resolution.
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def create_modified_tiff_with_http_info(image_data, bit_depth, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.create_modified_tiff ...'
      end
      # verify the required parameter 'image_data' is set
      if @api_client.config.client_side_validation && image_data.nil?
        fail ArgumentError, "Missing the required parameter 'image_data' when calling ImagingApi.create_modified_tiff"
      end
      # verify the required parameter 'bit_depth' is set
      if @api_client.config.client_side_validation && bit_depth.nil?
        fail ArgumentError, "Missing the required parameter 'bit_depth' when calling ImagingApi.create_modified_tiff"
      end
      # resource path
      local_var_path = '/imaging/tiff'

      # query parameters
      query_params = {}
      query_params[:'bitDepth'] = bit_depth
      query_params[:'compression'] = opts[:'compression'] if !opts[:'compression'].nil?
      query_params[:'resolutionUnit'] = opts[:'resolution_unit'] if !opts[:'resolution_unit'].nil?
      query_params[:'horizontalResolution'] = opts[:'horizontal_resolution'] if !opts[:'horizontal_resolution'].nil?
      query_params[:'verticalResolution'] = opts[:'vertical_resolution'] if !opts[:'vertical_resolution'].nil?
      query_params[:'fromScratch'] = opts[:'from_scratch'] if !opts[:'from_scratch'].nil?
      query_params[:'outPath'] = opts[:'out_path'] if !opts[:'out_path'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = image_data

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#create_modified_tiff\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update parameters of WEBP image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param loss_less If WEBP should be in lossless format.
    # @param quality Quality (0-100).
    # @param anim_loop_count The animation loop count.
    # @param anim_background_color Color of the animation background.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def create_modified_web_p(image_data, loss_less, quality, anim_loop_count, anim_background_color, opts = {})
      data, _status_code, _headers = create_modified_web_p_with_http_info(image_data, loss_less, quality, anim_loop_count, anim_background_color, opts)
      data
    end

    # Update parameters of WEBP image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param loss_less If WEBP should be in lossless format.
    # @param quality Quality (0-100).
    # @param anim_loop_count The animation loop count.
    # @param anim_background_color Color of the animation background.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def create_modified_web_p_with_http_info(image_data, loss_less, quality, anim_loop_count, anim_background_color, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.create_modified_web_p ...'
      end
      # verify the required parameter 'image_data' is set
      if @api_client.config.client_side_validation && image_data.nil?
        fail ArgumentError, "Missing the required parameter 'image_data' when calling ImagingApi.create_modified_web_p"
      end
      # verify the required parameter 'loss_less' is set
      if @api_client.config.client_side_validation && loss_less.nil?
        fail ArgumentError, "Missing the required parameter 'loss_less' when calling ImagingApi.create_modified_web_p"
      end
      # verify the required parameter 'quality' is set
      if @api_client.config.client_side_validation && quality.nil?
        fail ArgumentError, "Missing the required parameter 'quality' when calling ImagingApi.create_modified_web_p"
      end
      # verify the required parameter 'anim_loop_count' is set
      if @api_client.config.client_side_validation && anim_loop_count.nil?
        fail ArgumentError, "Missing the required parameter 'anim_loop_count' when calling ImagingApi.create_modified_web_p"
      end
      # verify the required parameter 'anim_background_color' is set
      if @api_client.config.client_side_validation && anim_background_color.nil?
        fail ArgumentError, "Missing the required parameter 'anim_background_color' when calling ImagingApi.create_modified_web_p"
      end
      # resource path
      local_var_path = '/imaging/webp'

      # query parameters
      query_params = {}
      query_params[:'lossLess'] = loss_less
      query_params[:'quality'] = quality
      query_params[:'animLoopCount'] = anim_loop_count
      query_params[:'animBackgroundColor'] = anim_background_color
      query_params[:'fromScratch'] = opts[:'from_scratch'] if !opts[:'from_scratch'].nil?
      query_params[:'outPath'] = opts[:'out_path'] if !opts[:'out_path'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = image_data

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#create_modified_web_p\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Process existing WMF image using given parameters. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param bk_color Color of the background.
    # @param page_width Width of the page.
    # @param page_height Height of the page.
    # @param border_x Border width.
    # @param border_y Border height.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @option opts [String] :format Export format (PNG is the default one). Please, refer to the export table from https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases. (default to png)
    # @return [File]
    def create_modified_wmf(image_data, bk_color, page_width, page_height, border_x, border_y, opts = {})
      data, _status_code, _headers = create_modified_wmf_with_http_info(image_data, bk_color, page_width, page_height, border_x, border_y, opts)
      data
    end

    # Process existing WMF image using given parameters. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param bk_color Color of the background.
    # @param page_width Width of the page.
    # @param page_height Height of the page.
    # @param border_x Border width.
    # @param border_y Border height.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @option opts [String] :format Export format (PNG is the default one). Please, refer to the export table from https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def create_modified_wmf_with_http_info(image_data, bk_color, page_width, page_height, border_x, border_y, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.create_modified_wmf ...'
      end
      # verify the required parameter 'image_data' is set
      if @api_client.config.client_side_validation && image_data.nil?
        fail ArgumentError, "Missing the required parameter 'image_data' when calling ImagingApi.create_modified_wmf"
      end
      # verify the required parameter 'bk_color' is set
      if @api_client.config.client_side_validation && bk_color.nil?
        fail ArgumentError, "Missing the required parameter 'bk_color' when calling ImagingApi.create_modified_wmf"
      end
      # verify the required parameter 'page_width' is set
      if @api_client.config.client_side_validation && page_width.nil?
        fail ArgumentError, "Missing the required parameter 'page_width' when calling ImagingApi.create_modified_wmf"
      end
      # verify the required parameter 'page_height' is set
      if @api_client.config.client_side_validation && page_height.nil?
        fail ArgumentError, "Missing the required parameter 'page_height' when calling ImagingApi.create_modified_wmf"
      end
      # verify the required parameter 'border_x' is set
      if @api_client.config.client_side_validation && border_x.nil?
        fail ArgumentError, "Missing the required parameter 'border_x' when calling ImagingApi.create_modified_wmf"
      end
      # verify the required parameter 'border_y' is set
      if @api_client.config.client_side_validation && border_y.nil?
        fail ArgumentError, "Missing the required parameter 'border_y' when calling ImagingApi.create_modified_wmf"
      end
      # resource path
      local_var_path = '/imaging/wmf'

      # query parameters
      query_params = {}
      query_params[:'bkColor'] = bk_color
      query_params[:'pageWidth'] = page_width
      query_params[:'pageHeight'] = page_height
      query_params[:'borderX'] = border_x
      query_params[:'borderY'] = border_y
      query_params[:'fromScratch'] = opts[:'from_scratch'] if !opts[:'from_scratch'].nil?
      query_params[:'outPath'] = opts[:'out_path'] if !opts[:'out_path'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = image_data

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#create_modified_wmf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resize an image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
    # @param new_width New width.
    # @param new_height New height.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def create_resized_image(image_data, format, new_width, new_height, opts = {})
      data, _status_code, _headers = create_resized_image_with_http_info(image_data, format, new_width, new_height, opts)
      data
    end

    # Resize an image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
    # @param new_width New width.
    # @param new_height New height.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def create_resized_image_with_http_info(image_data, format, new_width, new_height, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.create_resized_image ...'
      end
      # verify the required parameter 'image_data' is set
      if @api_client.config.client_side_validation && image_data.nil?
        fail ArgumentError, "Missing the required parameter 'image_data' when calling ImagingApi.create_resized_image"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling ImagingApi.create_resized_image"
      end
      # verify the required parameter 'new_width' is set
      if @api_client.config.client_side_validation && new_width.nil?
        fail ArgumentError, "Missing the required parameter 'new_width' when calling ImagingApi.create_resized_image"
      end
      # verify the required parameter 'new_height' is set
      if @api_client.config.client_side_validation && new_height.nil?
        fail ArgumentError, "Missing the required parameter 'new_height' when calling ImagingApi.create_resized_image"
      end
      # resource path
      local_var_path = '/imaging/resize'

      # query parameters
      query_params = {}
      query_params[:'format'] = format
      query_params[:'newWidth'] = new_width
      query_params[:'newHeight'] = new_height
      query_params[:'outPath'] = opts[:'out_path'] if !opts[:'out_path'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = image_data

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#create_resized_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Rotate and/or flip an image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
    # @param method RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def create_rotate_flipped_image(image_data, format, method, opts = {})
      data, _status_code, _headers = create_rotate_flipped_image_with_http_info(image_data, format, method, opts)
      data
    end

    # Rotate and/or flip an image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
    # @param method RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def create_rotate_flipped_image_with_http_info(image_data, format, method, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.create_rotate_flipped_image ...'
      end
      # verify the required parameter 'image_data' is set
      if @api_client.config.client_side_validation && image_data.nil?
        fail ArgumentError, "Missing the required parameter 'image_data' when calling ImagingApi.create_rotate_flipped_image"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling ImagingApi.create_rotate_flipped_image"
      end
      # verify the required parameter 'method' is set
      if @api_client.config.client_side_validation && method.nil?
        fail ArgumentError, "Missing the required parameter 'method' when calling ImagingApi.create_rotate_flipped_image"
      end
      # resource path
      local_var_path = '/imaging/rotateflip'

      # query parameters
      query_params = {}
      query_params[:'format'] = format
      query_params[:'method'] = method
      query_params[:'outPath'] = opts[:'out_path'] if !opts[:'out_path'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = image_data

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#create_rotate_flipped_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export existing image to another format. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.             
    # @param image_data Input image
    # @param format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def create_saved_image_as(image_data, format, opts = {})
      data, _status_code, _headers = create_saved_image_as_with_http_info(image_data, format, opts)
      data
    end

    # Export existing image to another format. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.             
    # @param image_data Input image
    # @param format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def create_saved_image_as_with_http_info(image_data, format, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.create_saved_image_as ...'
      end
      # verify the required parameter 'image_data' is set
      if @api_client.config.client_side_validation && image_data.nil?
        fail ArgumentError, "Missing the required parameter 'image_data' when calling ImagingApi.create_saved_image_as"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling ImagingApi.create_saved_image_as"
      end
      # resource path
      local_var_path = '/imaging/saveAs'

      # query parameters
      query_params = {}
      query_params[:'format'] = format
      query_params[:'outPath'] = opts[:'out_path'] if !opts[:'out_path'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = image_data

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#create_saved_image_as\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Perform scaling, cropping and flipping of an image in a single request. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
    # @param new_width New width of the scaled image.
    # @param new_height New height of the scaled image.
    # @param x X position of start point for cropping rectangle.
    # @param y Y position of start point for cropping rectangle.
    # @param rect_width Width of cropping rectangle.
    # @param rect_height Height of cropping rectangle.
    # @param rotate_flip_method RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY). Default is RotateNoneFlipNone.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def create_updated_image(image_data, format, new_width, new_height, x, y, rect_width, rect_height, rotate_flip_method, opts = {})
      data, _status_code, _headers = create_updated_image_with_http_info(image_data, format, new_width, new_height, x, y, rect_width, rect_height, rotate_flip_method, opts)
      data
    end

    # Perform scaling, cropping and flipping of an image in a single request. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
    # @param new_width New width of the scaled image.
    # @param new_height New height of the scaled image.
    # @param x X position of start point for cropping rectangle.
    # @param y Y position of start point for cropping rectangle.
    # @param rect_width Width of cropping rectangle.
    # @param rect_height Height of cropping rectangle.
    # @param rotate_flip_method RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY). Default is RotateNoneFlipNone.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :out_path Path to updated file (if this is empty, response contains streamed image).
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def create_updated_image_with_http_info(image_data, format, new_width, new_height, x, y, rect_width, rect_height, rotate_flip_method, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.create_updated_image ...'
      end
      # verify the required parameter 'image_data' is set
      if @api_client.config.client_side_validation && image_data.nil?
        fail ArgumentError, "Missing the required parameter 'image_data' when calling ImagingApi.create_updated_image"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling ImagingApi.create_updated_image"
      end
      # verify the required parameter 'new_width' is set
      if @api_client.config.client_side_validation && new_width.nil?
        fail ArgumentError, "Missing the required parameter 'new_width' when calling ImagingApi.create_updated_image"
      end
      # verify the required parameter 'new_height' is set
      if @api_client.config.client_side_validation && new_height.nil?
        fail ArgumentError, "Missing the required parameter 'new_height' when calling ImagingApi.create_updated_image"
      end
      # verify the required parameter 'x' is set
      if @api_client.config.client_side_validation && x.nil?
        fail ArgumentError, "Missing the required parameter 'x' when calling ImagingApi.create_updated_image"
      end
      # verify the required parameter 'y' is set
      if @api_client.config.client_side_validation && y.nil?
        fail ArgumentError, "Missing the required parameter 'y' when calling ImagingApi.create_updated_image"
      end
      # verify the required parameter 'rect_width' is set
      if @api_client.config.client_side_validation && rect_width.nil?
        fail ArgumentError, "Missing the required parameter 'rect_width' when calling ImagingApi.create_updated_image"
      end
      # verify the required parameter 'rect_height' is set
      if @api_client.config.client_side_validation && rect_height.nil?
        fail ArgumentError, "Missing the required parameter 'rect_height' when calling ImagingApi.create_updated_image"
      end
      # verify the required parameter 'rotate_flip_method' is set
      if @api_client.config.client_side_validation && rotate_flip_method.nil?
        fail ArgumentError, "Missing the required parameter 'rotate_flip_method' when calling ImagingApi.create_updated_image"
      end
      # resource path
      local_var_path = '/imaging/updateImage'

      # query parameters
      query_params = {}
      query_params[:'format'] = format
      query_params[:'newWidth'] = new_width
      query_params[:'newHeight'] = new_height
      query_params[:'x'] = x
      query_params[:'y'] = y
      query_params[:'rectWidth'] = rect_width
      query_params[:'rectHeight'] = rect_height
      query_params[:'rotateFlipMethod'] = rotate_flip_method
      query_params[:'outPath'] = opts[:'out_path'] if !opts[:'out_path'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = image_data

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#create_updated_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Crop an existing image.
    # @param name Filename of an image.
    # @param format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
    # @param x X position of start point for cropping rectangle.
    # @param y Y position of start point for cropping rectangle.
    # @param width Width of cropping rectangle
    # @param height Height of cropping rectangle.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def crop_image(name, format, x, y, width, height, opts = {})
      data, _status_code, _headers = crop_image_with_http_info(name, format, x, y, width, height, opts)
      data
    end

    # Crop an existing image.
    # @param name Filename of an image.
    # @param format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
    # @param x X position of start point for cropping rectangle.
    # @param y Y position of start point for cropping rectangle.
    # @param width Width of cropping rectangle
    # @param height Height of cropping rectangle.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def crop_image_with_http_info(name, format, x, y, width, height, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.crop_image ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ImagingApi.crop_image"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling ImagingApi.crop_image"
      end
      # verify the required parameter 'x' is set
      if @api_client.config.client_side_validation && x.nil?
        fail ArgumentError, "Missing the required parameter 'x' when calling ImagingApi.crop_image"
      end
      # verify the required parameter 'y' is set
      if @api_client.config.client_side_validation && y.nil?
        fail ArgumentError, "Missing the required parameter 'y' when calling ImagingApi.crop_image"
      end
      # verify the required parameter 'width' is set
      if @api_client.config.client_side_validation && width.nil?
        fail ArgumentError, "Missing the required parameter 'width' when calling ImagingApi.crop_image"
      end
      # verify the required parameter 'height' is set
      if @api_client.config.client_side_validation && height.nil?
        fail ArgumentError, "Missing the required parameter 'height' when calling ImagingApi.crop_image"
      end
      # resource path
      local_var_path = '/imaging/{name}/crop'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'format'] = format
      query_params[:'x'] = x
      query_params[:'y'] = y
      query_params[:'width'] = width
      query_params[:'height'] = height
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#crop_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete file
    # @param path File path e.g. &#39;/folder/file.ext&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @option opts [String] :version_id File version ID to delete
    # @return [nil]
    def delete_file(path, opts = {})
      delete_file_with_http_info(path, opts)
      nil
    end

    # Delete file
    # @param path File path e.g. &#39;/folder/file.ext&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @option opts [String] :version_id File version ID to delete
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_file_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.delete_file ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ImagingApi.delete_file"
      end
      # resource path
      local_var_path = '/imaging/storage/file/{path}'.sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = {}
      query_params[:'storageName'] = opts[:'storage_name'] if !opts[:'storage_name'].nil?
      query_params[:'versionId'] = opts[:'version_id'] if !opts[:'version_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#delete_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete folder
    # @param path Folder path e.g. &#39;/folder&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @option opts [BOOLEAN] :recursive Enable to delete folders, subfolders and files (default to false)
    # @return [nil]
    def delete_folder(path, opts = {})
      delete_folder_with_http_info(path, opts)
      nil
    end

    # Delete folder
    # @param path Folder path e.g. &#39;/folder&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @option opts [BOOLEAN] :recursive Enable to delete folders, subfolders and files
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_folder_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.delete_folder ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ImagingApi.delete_folder"
      end
      # resource path
      local_var_path = '/imaging/storage/folder/{path}'.sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = {}
      query_params[:'storageName'] = opts[:'storage_name'] if !opts[:'storage_name'].nil?
      query_params[:'recursive'] = opts[:'recursive'] if !opts[:'recursive'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#delete_folder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes image features from search context.
    # @param search_context_id The search context identifier.
    # @param image_id The image identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [nil]
    def delete_image_features(search_context_id, image_id, opts = {})
      delete_image_features_with_http_info(search_context_id, image_id, opts)
      nil
    end

    # Deletes image features from search context.
    # @param search_context_id The search context identifier.
    # @param image_id The image identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_image_features_with_http_info(search_context_id, image_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.delete_image_features ...'
      end
      # verify the required parameter 'search_context_id' is set
      if @api_client.config.client_side_validation && search_context_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_context_id' when calling ImagingApi.delete_image_features"
      end
      # verify the required parameter 'image_id' is set
      if @api_client.config.client_side_validation && image_id.nil?
        fail ArgumentError, "Missing the required parameter 'image_id' when calling ImagingApi.delete_image_features"
      end
      # resource path
      local_var_path = '/imaging/ai/imageSearch/{searchContextId}/features'.sub('{' + 'searchContextId' + '}', search_context_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'imageId'] = image_id
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#delete_image_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes the search context.
    # @param search_context_id The search context identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [nil]
    def delete_image_search(search_context_id, opts = {})
      delete_image_search_with_http_info(search_context_id, opts)
      nil
    end

    # Deletes the search context.
    # @param search_context_id The search context identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_image_search_with_http_info(search_context_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.delete_image_search ...'
      end
      # verify the required parameter 'search_context_id' is set
      if @api_client.config.client_side_validation && search_context_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_context_id' when calling ImagingApi.delete_image_search"
      end
      # resource path
      local_var_path = '/imaging/ai/imageSearch/{searchContextId}'.sub('{' + 'searchContextId' + '}', search_context_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#delete_image_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete image and images features from search context
    # @param search_context_id Search context identifier.
    # @param image_id Image identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Folder.
    # @option opts [String] :storage Storage
    # @return [nil]
    def delete_search_image(search_context_id, image_id, opts = {})
      delete_search_image_with_http_info(search_context_id, image_id, opts)
      nil
    end

    # Delete image and images features from search context
    # @param search_context_id Search context identifier.
    # @param image_id Image identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Folder.
    # @option opts [String] :storage Storage
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_search_image_with_http_info(search_context_id, image_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.delete_search_image ...'
      end
      # verify the required parameter 'search_context_id' is set
      if @api_client.config.client_side_validation && search_context_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_context_id' when calling ImagingApi.delete_search_image"
      end
      # verify the required parameter 'image_id' is set
      if @api_client.config.client_side_validation && image_id.nil?
        fail ArgumentError, "Missing the required parameter 'image_id' when calling ImagingApi.delete_search_image"
      end
      # resource path
      local_var_path = '/imaging/ai/imageSearch/{searchContextId}/image'.sub('{' + 'searchContextId' + '}', search_context_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'imageId'] = image_id
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#delete_search_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download file
    # @param path File path e.g. &#39;/folder/file.ext&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @option opts [String] :version_id File version ID to download
    # @return [File]
    def download_file(path, opts = {})
      data, _status_code, _headers = download_file_with_http_info(path, opts)
      data
    end

    # Download file
    # @param path File path e.g. &#39;/folder/file.ext&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @option opts [String] :version_id File version ID to download
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def download_file_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.download_file ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ImagingApi.download_file"
      end
      # resource path
      local_var_path = '/imaging/storage/file/{path}'.sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = {}
      query_params[:'storageName'] = opts[:'storage_name'] if !opts[:'storage_name'].nil?
      query_params[:'versionId'] = opts[:'version_id'] if !opts[:'version_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['multipart/form-data'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#download_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Extract features from image without adding to search context. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param search_context_id The search context identifier.
    # @param image_id The image identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image_data Input image
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [ImageFeatures]
    def extract_image_features(search_context_id, image_id, opts = {})
      data, _status_code, _headers = extract_image_features_with_http_info(search_context_id, image_id, opts)
      data
    end

    # Extract features from image without adding to search context. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param search_context_id The search context identifier.
    # @param image_id The image identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image_data Input image
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [Array<(ImageFeatures, Fixnum, Hash)>] ImageFeatures data, response status code and response headers
    def extract_image_features_with_http_info(search_context_id, image_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.extract_image_features ...'
      end
      # verify the required parameter 'search_context_id' is set
      if @api_client.config.client_side_validation && search_context_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_context_id' when calling ImagingApi.extract_image_features"
      end
      # verify the required parameter 'image_id' is set
      if @api_client.config.client_side_validation && image_id.nil?
        fail ArgumentError, "Missing the required parameter 'image_id' when calling ImagingApi.extract_image_features"
      end
      # resource path
      local_var_path = '/imaging/ai/imageSearch/{searchContextId}/image2features'.sub('{' + 'searchContextId' + '}', search_context_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'imageId'] = image_id
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = opts[:'image_data'] if !opts[:'image_data'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImageFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#extract_image_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get separate frame properties of existing TIFF image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param frame_id Number of a frame.
    # @param [Hash] opts the optional parameters
    # @return [ImagingResponse]
    def extract_image_frame_properties(image_data, frame_id, opts = {})
      data, _status_code, _headers = extract_image_frame_properties_with_http_info(image_data, frame_id, opts)
      data
    end

    # Get separate frame properties of existing TIFF image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param frame_id Number of a frame.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImagingResponse, Fixnum, Hash)>] ImagingResponse data, response status code and response headers
    def extract_image_frame_properties_with_http_info(image_data, frame_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.extract_image_frame_properties ...'
      end
      # verify the required parameter 'image_data' is set
      if @api_client.config.client_side_validation && image_data.nil?
        fail ArgumentError, "Missing the required parameter 'image_data' when calling ImagingApi.extract_image_frame_properties"
      end
      # verify the required parameter 'frame_id' is set
      if @api_client.config.client_side_validation && frame_id.nil?
        fail ArgumentError, "Missing the required parameter 'frame_id' when calling ImagingApi.extract_image_frame_properties"
      end
      # resource path
      local_var_path = '/imaging/frames/{frameId}/properties'.sub('{' + 'frameId' + '}', frame_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = image_data

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImagingResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#extract_image_frame_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get properties of an image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param [Hash] opts the optional parameters
    # @return [ImagingResponse]
    def extract_image_properties(image_data, opts = {})
      data, _status_code, _headers = extract_image_properties_with_http_info(image_data, opts)
      data
    end

    # Get properties of an image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param image_data Input image
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImagingResponse, Fixnum, Hash)>] ImagingResponse data, response status code and response headers
    def extract_image_properties_with_http_info(image_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.extract_image_properties ...'
      end
      # verify the required parameter 'image_data' is set
      if @api_client.config.client_side_validation && image_data.nil?
        fail ArgumentError, "Missing the required parameter 'image_data' when calling ImagingApi.extract_image_properties"
      end
      # resource path
      local_var_path = '/imaging/properties'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = image_data

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImagingResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#extract_image_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find images duplicates.
    # @param search_context_id The search context identifier.
    # @param similarity_threshold The similarity threshold.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [ImageDuplicatesSet]
    def find_image_duplicates(search_context_id, similarity_threshold, opts = {})
      data, _status_code, _headers = find_image_duplicates_with_http_info(search_context_id, similarity_threshold, opts)
      data
    end

    # Find images duplicates.
    # @param search_context_id The search context identifier.
    # @param similarity_threshold The similarity threshold.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [Array<(ImageDuplicatesSet, Fixnum, Hash)>] ImageDuplicatesSet data, response status code and response headers
    def find_image_duplicates_with_http_info(search_context_id, similarity_threshold, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.find_image_duplicates ...'
      end
      # verify the required parameter 'search_context_id' is set
      if @api_client.config.client_side_validation && search_context_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_context_id' when calling ImagingApi.find_image_duplicates"
      end
      # verify the required parameter 'similarity_threshold' is set
      if @api_client.config.client_side_validation && similarity_threshold.nil?
        fail ArgumentError, "Missing the required parameter 'similarity_threshold' when calling ImagingApi.find_image_duplicates"
      end
      # resource path
      local_var_path = '/imaging/ai/imageSearch/{searchContextId}/findDuplicates'.sub('{' + 'searchContextId' + '}', search_context_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'similarityThreshold'] = similarity_threshold
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImageDuplicatesSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#find_image_duplicates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find images by tags. Tags JSON string is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param tags Tags array for searching
    # @param search_context_id The search context identifier.
    # @param similarity_threshold The similarity threshold.
    # @param max_count The maximum count.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [SearchResultsSet]
    def find_images_by_tags(tags, search_context_id, similarity_threshold, max_count, opts = {})
      data, _status_code, _headers = find_images_by_tags_with_http_info(tags, search_context_id, similarity_threshold, max_count, opts)
      data
    end

    # Find images by tags. Tags JSON string is passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param tags Tags array for searching
    # @param search_context_id The search context identifier.
    # @param similarity_threshold The similarity threshold.
    # @param max_count The maximum count.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [Array<(SearchResultsSet, Fixnum, Hash)>] SearchResultsSet data, response status code and response headers
    def find_images_by_tags_with_http_info(tags, search_context_id, similarity_threshold, max_count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.find_images_by_tags ...'
      end
      # verify the required parameter 'tags' is set
      if @api_client.config.client_side_validation && tags.nil?
        fail ArgumentError, "Missing the required parameter 'tags' when calling ImagingApi.find_images_by_tags"
      end
      # verify the required parameter 'search_context_id' is set
      if @api_client.config.client_side_validation && search_context_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_context_id' when calling ImagingApi.find_images_by_tags"
      end
      # verify the required parameter 'similarity_threshold' is set
      if @api_client.config.client_side_validation && similarity_threshold.nil?
        fail ArgumentError, "Missing the required parameter 'similarity_threshold' when calling ImagingApi.find_images_by_tags"
      end
      # verify the required parameter 'max_count' is set
      if @api_client.config.client_side_validation && max_count.nil?
        fail ArgumentError, "Missing the required parameter 'max_count' when calling ImagingApi.find_images_by_tags"
      end
      # resource path
      local_var_path = '/imaging/ai/imageSearch/{searchContextId}/findByTags'.sub('{' + 'searchContextId' + '}', search_context_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'similarityThreshold'] = similarity_threshold
      query_params[:'maxCount'] = max_count
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['tags'] = tags

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SearchResultsSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#find_images_by_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find similar images. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param search_context_id The search context identifier.
    # @param similarity_threshold The similarity threshold.
    # @param max_count The maximum count.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image_data Input image
    # @option opts [String] :image_id The search image identifier.
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [SearchResultsSet]
    def find_similar_images(search_context_id, similarity_threshold, max_count, opts = {})
      data, _status_code, _headers = find_similar_images_with_http_info(search_context_id, similarity_threshold, max_count, opts)
      data
    end

    # Find similar images. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param search_context_id The search context identifier.
    # @param similarity_threshold The similarity threshold.
    # @param max_count The maximum count.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image_data Input image
    # @option opts [String] :image_id The search image identifier.
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [Array<(SearchResultsSet, Fixnum, Hash)>] SearchResultsSet data, response status code and response headers
    def find_similar_images_with_http_info(search_context_id, similarity_threshold, max_count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.find_similar_images ...'
      end
      # verify the required parameter 'search_context_id' is set
      if @api_client.config.client_side_validation && search_context_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_context_id' when calling ImagingApi.find_similar_images"
      end
      # verify the required parameter 'similarity_threshold' is set
      if @api_client.config.client_side_validation && similarity_threshold.nil?
        fail ArgumentError, "Missing the required parameter 'similarity_threshold' when calling ImagingApi.find_similar_images"
      end
      # verify the required parameter 'max_count' is set
      if @api_client.config.client_side_validation && max_count.nil?
        fail ArgumentError, "Missing the required parameter 'max_count' when calling ImagingApi.find_similar_images"
      end
      # resource path
      local_var_path = '/imaging/ai/imageSearch/{searchContextId}/findSimilar'.sub('{' + 'searchContextId' + '}', search_context_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'similarityThreshold'] = similarity_threshold
      query_params[:'maxCount'] = max_count
      query_params[:'imageId'] = opts[:'image_id'] if !opts[:'image_id'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = opts[:'image_data'] if !opts[:'image_data'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SearchResultsSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#find_similar_images\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get disc usage
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @return [DiscUsage]
    def get_disc_usage(opts = {})
      data, _status_code, _headers = get_disc_usage_with_http_info(opts)
      data
    end

    # Get disc usage
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @return [Array<(DiscUsage, Fixnum, Hash)>] DiscUsage data, response status code and response headers
    def get_disc_usage_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.get_disc_usage ...'
      end
      # resource path
      local_var_path = '/imaging/storage/disc'

      # query parameters
      query_params = {}
      query_params[:'storageName'] = opts[:'storage_name'] if !opts[:'storage_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DiscUsage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#get_disc_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get file versions
    # @param path File path e.g. &#39;/file.ext&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @return [FileVersions]
    def get_file_versions(path, opts = {})
      data, _status_code, _headers = get_file_versions_with_http_info(path, opts)
      data
    end

    # Get file versions
    # @param path File path e.g. &#39;/file.ext&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @return [Array<(FileVersions, Fixnum, Hash)>] FileVersions data, response status code and response headers
    def get_file_versions_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.get_file_versions ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ImagingApi.get_file_versions"
      end
      # resource path
      local_var_path = '/imaging/storage/version/{path}'.sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = {}
      query_params[:'storageName'] = opts[:'storage_name'] if !opts[:'storage_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FileVersions')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#get_file_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all files and folders within a folder
    # @param path Folder path e.g. &#39;/folder&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @return [FilesList]
    def get_files_list(path, opts = {})
      data, _status_code, _headers = get_files_list_with_http_info(path, opts)
      data
    end

    # Get all files and folders within a folder
    # @param path Folder path e.g. &#39;/folder&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @return [Array<(FilesList, Fixnum, Hash)>] FilesList data, response status code and response headers
    def get_files_list_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.get_files_list ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ImagingApi.get_files_list"
      end
      # resource path
      local_var_path = '/imaging/storage/folder/{path}'.sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = {}
      query_params[:'storageName'] = opts[:'storage_name'] if !opts[:'storage_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FilesList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#get_files_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets image features from search context.
    # @param search_context_id The search context identifier.
    # @param image_id The image identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [ImageFeatures]
    def get_image_features(search_context_id, image_id, opts = {})
      data, _status_code, _headers = get_image_features_with_http_info(search_context_id, image_id, opts)
      data
    end

    # Gets image features from search context.
    # @param search_context_id The search context identifier.
    # @param image_id The image identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [Array<(ImageFeatures, Fixnum, Hash)>] ImageFeatures data, response status code and response headers
    def get_image_features_with_http_info(search_context_id, image_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.get_image_features ...'
      end
      # verify the required parameter 'search_context_id' is set
      if @api_client.config.client_side_validation && search_context_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_context_id' when calling ImagingApi.get_image_features"
      end
      # verify the required parameter 'image_id' is set
      if @api_client.config.client_side_validation && image_id.nil?
        fail ArgumentError, "Missing the required parameter 'image_id' when calling ImagingApi.get_image_features"
      end
      # resource path
      local_var_path = '/imaging/ai/imageSearch/{searchContextId}/features'.sub('{' + 'searchContextId' + '}', search_context_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'imageId'] = image_id
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImageFeatures')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#get_image_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get separate frame from existing TIFF image.
    # @param name Filename of image.
    # @param frame_id Number of a frame.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :new_width New width.
    # @option opts [Integer] :new_height New height.
    # @option opts [Integer] :x X position of start point for cropping rectangle.
    # @option opts [Integer] :y Y position of start point for cropping rectangle.
    # @option opts [Integer] :rect_width Width of cropping rectangle.
    # @option opts [Integer] :rect_height Height of cropping rectangle.
    # @option opts [String] :rotate_flip_method RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY). Default is RotateNoneFlipNone.
    # @option opts [BOOLEAN] :save_other_frames If result will include all other frames or just a specified frame. (default to false)
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def get_image_frame(name, frame_id, opts = {})
      data, _status_code, _headers = get_image_frame_with_http_info(name, frame_id, opts)
      data
    end

    # Get separate frame from existing TIFF image.
    # @param name Filename of image.
    # @param frame_id Number of a frame.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :new_width New width.
    # @option opts [Integer] :new_height New height.
    # @option opts [Integer] :x X position of start point for cropping rectangle.
    # @option opts [Integer] :y Y position of start point for cropping rectangle.
    # @option opts [Integer] :rect_width Width of cropping rectangle.
    # @option opts [Integer] :rect_height Height of cropping rectangle.
    # @option opts [String] :rotate_flip_method RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY). Default is RotateNoneFlipNone.
    # @option opts [BOOLEAN] :save_other_frames If result will include all other frames or just a specified frame.
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def get_image_frame_with_http_info(name, frame_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.get_image_frame ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ImagingApi.get_image_frame"
      end
      # verify the required parameter 'frame_id' is set
      if @api_client.config.client_side_validation && frame_id.nil?
        fail ArgumentError, "Missing the required parameter 'frame_id' when calling ImagingApi.get_image_frame"
      end
      # resource path
      local_var_path = '/imaging/{name}/frames/{frameId}'.sub('{' + 'name' + '}', name.to_s).sub('{' + 'frameId' + '}', frame_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'newWidth'] = opts[:'new_width'] if !opts[:'new_width'].nil?
      query_params[:'newHeight'] = opts[:'new_height'] if !opts[:'new_height'].nil?
      query_params[:'x'] = opts[:'x'] if !opts[:'x'].nil?
      query_params[:'y'] = opts[:'y'] if !opts[:'y'].nil?
      query_params[:'rectWidth'] = opts[:'rect_width'] if !opts[:'rect_width'].nil?
      query_params[:'rectHeight'] = opts[:'rect_height'] if !opts[:'rect_height'].nil?
      query_params[:'rotateFlipMethod'] = opts[:'rotate_flip_method'] if !opts[:'rotate_flip_method'].nil?
      query_params[:'saveOtherFrames'] = opts[:'save_other_frames'] if !opts[:'save_other_frames'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#get_image_frame\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get separate frame properties of existing TIFF image.
    # @param name Filename with image.
    # @param frame_id Number of a frame.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [ImagingResponse]
    def get_image_frame_properties(name, frame_id, opts = {})
      data, _status_code, _headers = get_image_frame_properties_with_http_info(name, frame_id, opts)
      data
    end

    # Get separate frame properties of existing TIFF image.
    # @param name Filename with image.
    # @param frame_id Number of a frame.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(ImagingResponse, Fixnum, Hash)>] ImagingResponse data, response status code and response headers
    def get_image_frame_properties_with_http_info(name, frame_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.get_image_frame_properties ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ImagingApi.get_image_frame_properties"
      end
      # verify the required parameter 'frame_id' is set
      if @api_client.config.client_side_validation && frame_id.nil?
        fail ArgumentError, "Missing the required parameter 'frame_id' when calling ImagingApi.get_image_frame_properties"
      end
      # resource path
      local_var_path = '/imaging/{name}/frames/{frameId}/properties'.sub('{' + 'name' + '}', name.to_s).sub('{' + 'frameId' + '}', frame_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImagingResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#get_image_frame_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get properties of an image.
    # @param name Filename of an image.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [ImagingResponse]
    def get_image_properties(name, opts = {})
      data, _status_code, _headers = get_image_properties_with_http_info(name, opts)
      data
    end

    # Get properties of an image.
    # @param name Filename of an image.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(ImagingResponse, Fixnum, Hash)>] ImagingResponse data, response status code and response headers
    def get_image_properties_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.get_image_properties ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ImagingApi.get_image_properties"
      end
      # resource path
      local_var_path = '/imaging/{name}/properties'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImagingResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#get_image_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets the search context status.
    # @param search_context_id The search context identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [SearchContextStatus]
    def get_image_search_status(search_context_id, opts = {})
      data, _status_code, _headers = get_image_search_status_with_http_info(search_context_id, opts)
      data
    end

    # Gets the search context status.
    # @param search_context_id The search context identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [Array<(SearchContextStatus, Fixnum, Hash)>] SearchContextStatus data, response status code and response headers
    def get_image_search_status_with_http_info(search_context_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.get_image_search_status ...'
      end
      # verify the required parameter 'search_context_id' is set
      if @api_client.config.client_side_validation && search_context_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_context_id' when calling ImagingApi.get_image_search_status"
      end
      # resource path
      local_var_path = '/imaging/ai/imageSearch/{searchContextId}/status'.sub('{' + 'searchContextId' + '}', search_context_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SearchContextStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#get_image_search_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get image from search context
    # @param search_context_id Search context identifier.
    # @param image_id Image identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Folder.
    # @option opts [String] :storage Storage
    # @return [File]
    def get_search_image(search_context_id, image_id, opts = {})
      data, _status_code, _headers = get_search_image_with_http_info(search_context_id, image_id, opts)
      data
    end

    # Get image from search context
    # @param search_context_id Search context identifier.
    # @param image_id Image identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Folder.
    # @option opts [String] :storage Storage
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def get_search_image_with_http_info(search_context_id, image_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.get_search_image ...'
      end
      # verify the required parameter 'search_context_id' is set
      if @api_client.config.client_side_validation && search_context_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_context_id' when calling ImagingApi.get_search_image"
      end
      # verify the required parameter 'image_id' is set
      if @api_client.config.client_side_validation && image_id.nil?
        fail ArgumentError, "Missing the required parameter 'image_id' when calling ImagingApi.get_search_image"
      end
      # resource path
      local_var_path = '/imaging/ai/imageSearch/{searchContextId}/image'.sub('{' + 'searchContextId' + '}', search_context_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'imageId'] = image_id
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#get_search_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update parameters of existing BMP image.
    # @param name Filename of image.
    # @param bits_per_pixel Color depth.
    # @param horizontal_resolution New horizontal resolution.
    # @param vertical_resolution New vertical resolution.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def modify_bmp(name, bits_per_pixel, horizontal_resolution, vertical_resolution, opts = {})
      data, _status_code, _headers = modify_bmp_with_http_info(name, bits_per_pixel, horizontal_resolution, vertical_resolution, opts)
      data
    end

    # Update parameters of existing BMP image.
    # @param name Filename of image.
    # @param bits_per_pixel Color depth.
    # @param horizontal_resolution New horizontal resolution.
    # @param vertical_resolution New vertical resolution.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def modify_bmp_with_http_info(name, bits_per_pixel, horizontal_resolution, vertical_resolution, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.modify_bmp ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ImagingApi.modify_bmp"
      end
      # verify the required parameter 'bits_per_pixel' is set
      if @api_client.config.client_side_validation && bits_per_pixel.nil?
        fail ArgumentError, "Missing the required parameter 'bits_per_pixel' when calling ImagingApi.modify_bmp"
      end
      # verify the required parameter 'horizontal_resolution' is set
      if @api_client.config.client_side_validation && horizontal_resolution.nil?
        fail ArgumentError, "Missing the required parameter 'horizontal_resolution' when calling ImagingApi.modify_bmp"
      end
      # verify the required parameter 'vertical_resolution' is set
      if @api_client.config.client_side_validation && vertical_resolution.nil?
        fail ArgumentError, "Missing the required parameter 'vertical_resolution' when calling ImagingApi.modify_bmp"
      end
      # resource path
      local_var_path = '/imaging/{name}/bmp'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'bitsPerPixel'] = bits_per_pixel
      query_params[:'horizontalResolution'] = horizontal_resolution
      query_params[:'verticalResolution'] = vertical_resolution
      query_params[:'fromScratch'] = opts[:'from_scratch'] if !opts[:'from_scratch'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#modify_bmp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Process existing EMF imaging using given parameters.
    # @param name Filename of image.
    # @param bk_color Color of the background.
    # @param page_width Width of the page.
    # @param page_height Height of the page.
    # @param border_x Border width.
    # @param border_y Border height.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @option opts [String] :format Export format (PNG is the default one). Please, refer to the export table from https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases. (default to png)
    # @return [File]
    def modify_emf(name, bk_color, page_width, page_height, border_x, border_y, opts = {})
      data, _status_code, _headers = modify_emf_with_http_info(name, bk_color, page_width, page_height, border_x, border_y, opts)
      data
    end

    # Process existing EMF imaging using given parameters.
    # @param name Filename of image.
    # @param bk_color Color of the background.
    # @param page_width Width of the page.
    # @param page_height Height of the page.
    # @param border_x Border width.
    # @param border_y Border height.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @option opts [String] :format Export format (PNG is the default one). Please, refer to the export table from https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def modify_emf_with_http_info(name, bk_color, page_width, page_height, border_x, border_y, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.modify_emf ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ImagingApi.modify_emf"
      end
      # verify the required parameter 'bk_color' is set
      if @api_client.config.client_side_validation && bk_color.nil?
        fail ArgumentError, "Missing the required parameter 'bk_color' when calling ImagingApi.modify_emf"
      end
      # verify the required parameter 'page_width' is set
      if @api_client.config.client_side_validation && page_width.nil?
        fail ArgumentError, "Missing the required parameter 'page_width' when calling ImagingApi.modify_emf"
      end
      # verify the required parameter 'page_height' is set
      if @api_client.config.client_side_validation && page_height.nil?
        fail ArgumentError, "Missing the required parameter 'page_height' when calling ImagingApi.modify_emf"
      end
      # verify the required parameter 'border_x' is set
      if @api_client.config.client_side_validation && border_x.nil?
        fail ArgumentError, "Missing the required parameter 'border_x' when calling ImagingApi.modify_emf"
      end
      # verify the required parameter 'border_y' is set
      if @api_client.config.client_side_validation && border_y.nil?
        fail ArgumentError, "Missing the required parameter 'border_y' when calling ImagingApi.modify_emf"
      end
      # resource path
      local_var_path = '/imaging/{name}/emf'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'bkColor'] = bk_color
      query_params[:'pageWidth'] = page_width
      query_params[:'pageHeight'] = page_height
      query_params[:'borderX'] = border_x
      query_params[:'borderY'] = border_y
      query_params[:'fromScratch'] = opts[:'from_scratch'] if !opts[:'from_scratch'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#modify_emf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update parameters of existing GIF image.
    # @param name Filename of image.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :background_color_index Index of the background color. (default to 32)
    # @option opts [Integer] :color_resolution Color resolution. (default to 3)
    # @option opts [BOOLEAN] :has_trailer Specifies if image has trailer. (default to true)
    # @option opts [BOOLEAN] :interlaced Specifies if image is interlaced. (default to true)
    # @option opts [BOOLEAN] :is_palette_sorted Specifies if palette is sorted. (default to false)
    # @option opts [Integer] :pixel_aspect_ratio Pixel aspect ratio. (default to 3)
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to true)
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def modify_gif(name, opts = {})
      data, _status_code, _headers = modify_gif_with_http_info(name, opts)
      data
    end

    # Update parameters of existing GIF image.
    # @param name Filename of image.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :background_color_index Index of the background color.
    # @option opts [Integer] :color_resolution Color resolution.
    # @option opts [BOOLEAN] :has_trailer Specifies if image has trailer.
    # @option opts [BOOLEAN] :interlaced Specifies if image is interlaced.
    # @option opts [BOOLEAN] :is_palette_sorted Specifies if palette is sorted.
    # @option opts [Integer] :pixel_aspect_ratio Pixel aspect ratio.
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def modify_gif_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.modify_gif ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ImagingApi.modify_gif"
      end
      # resource path
      local_var_path = '/imaging/{name}/gif'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'backgroundColorIndex'] = opts[:'background_color_index'] if !opts[:'background_color_index'].nil?
      query_params[:'colorResolution'] = opts[:'color_resolution'] if !opts[:'color_resolution'].nil?
      query_params[:'hasTrailer'] = opts[:'has_trailer'] if !opts[:'has_trailer'].nil?
      query_params[:'interlaced'] = opts[:'interlaced'] if !opts[:'interlaced'].nil?
      query_params[:'isPaletteSorted'] = opts[:'is_palette_sorted'] if !opts[:'is_palette_sorted'].nil?
      query_params[:'pixelAspectRatio'] = opts[:'pixel_aspect_ratio'] if !opts[:'pixel_aspect_ratio'].nil?
      query_params[:'fromScratch'] = opts[:'from_scratch'] if !opts[:'from_scratch'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#modify_gif\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update parameters of existing JPEG image.
    # @param name Filename of image.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :quality Quality of an image from 0 to 100. Default is 75. (default to 75)
    # @option opts [String] :compression_type Compression type: baseline (default), progressive, lossless or jpegls. (default to baseline)
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def modify_jpeg(name, opts = {})
      data, _status_code, _headers = modify_jpeg_with_http_info(name, opts)
      data
    end

    # Update parameters of existing JPEG image.
    # @param name Filename of image.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :quality Quality of an image from 0 to 100. Default is 75.
    # @option opts [String] :compression_type Compression type: baseline (default), progressive, lossless or jpegls.
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def modify_jpeg_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.modify_jpeg ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ImagingApi.modify_jpeg"
      end
      # resource path
      local_var_path = '/imaging/{name}/jpg'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'quality'] = opts[:'quality'] if !opts[:'quality'].nil?
      query_params[:'compressionType'] = opts[:'compression_type'] if !opts[:'compression_type'].nil?
      query_params[:'fromScratch'] = opts[:'from_scratch'] if !opts[:'from_scratch'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#modify_jpeg\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update parameters of existing JPEG2000 image.
    # @param name Filename of image.
    # @param comment The comment (can be either single or comma-separated).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :codec The codec (j2k or jp2). (default to j2k)
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def modify_jpeg2000(name, comment, opts = {})
      data, _status_code, _headers = modify_jpeg2000_with_http_info(name, comment, opts)
      data
    end

    # Update parameters of existing JPEG2000 image.
    # @param name Filename of image.
    # @param comment The comment (can be either single or comma-separated).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :codec The codec (j2k or jp2).
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def modify_jpeg2000_with_http_info(name, comment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.modify_jpeg2000 ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ImagingApi.modify_jpeg2000"
      end
      # verify the required parameter 'comment' is set
      if @api_client.config.client_side_validation && comment.nil?
        fail ArgumentError, "Missing the required parameter 'comment' when calling ImagingApi.modify_jpeg2000"
      end
      # resource path
      local_var_path = '/imaging/{name}/jpg2000'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'comment'] = comment
      query_params[:'codec'] = opts[:'codec'] if !opts[:'codec'].nil?
      query_params[:'fromScratch'] = opts[:'from_scratch'] if !opts[:'from_scratch'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#modify_jpeg2000\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update parameters of existing PSD image.
    # @param name Filename of image.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :channels_count Count of color channels. (default to 4)
    # @option opts [String] :compression_method Compression method (for now, raw and RLE are supported). (default to rle)
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def modify_psd(name, opts = {})
      data, _status_code, _headers = modify_psd_with_http_info(name, opts)
      data
    end

    # Update parameters of existing PSD image.
    # @param name Filename of image.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :channels_count Count of color channels.
    # @option opts [String] :compression_method Compression method (for now, raw and RLE are supported).
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def modify_psd_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.modify_psd ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ImagingApi.modify_psd"
      end
      # resource path
      local_var_path = '/imaging/{name}/psd'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'channelsCount'] = opts[:'channels_count'] if !opts[:'channels_count'].nil?
      query_params[:'compressionMethod'] = opts[:'compression_method'] if !opts[:'compression_method'].nil?
      query_params[:'fromScratch'] = opts[:'from_scratch'] if !opts[:'from_scratch'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#modify_psd\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update parameters of existing TIFF image.
    # @param name Filename of image.
    # @param bit_depth Bit depth.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :compression Compression (none is default). Please, refer to https://apireference.aspose.com/net/imaging/aspose.imaging.fileformats.tiff.enums/tiffcompressions for all possible values.
    # @option opts [String] :resolution_unit New resolution unit (none - the default one, inch or centimeter).
    # @option opts [Float] :horizontal_resolution New horizontal resolution. (default to 0.0)
    # @option opts [Float] :vertical_resolution New vertical resolution. (default to 0.0)
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def modify_tiff(name, bit_depth, opts = {})
      data, _status_code, _headers = modify_tiff_with_http_info(name, bit_depth, opts)
      data
    end

    # Update parameters of existing TIFF image.
    # @param name Filename of image.
    # @param bit_depth Bit depth.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :compression Compression (none is default). Please, refer to https://apireference.aspose.com/net/imaging/aspose.imaging.fileformats.tiff.enums/tiffcompressions for all possible values.
    # @option opts [String] :resolution_unit New resolution unit (none - the default one, inch or centimeter).
    # @option opts [Float] :horizontal_resolution New horizontal resolution.
    # @option opts [Float] :vertical_resolution New vertical resolution.
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def modify_tiff_with_http_info(name, bit_depth, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.modify_tiff ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ImagingApi.modify_tiff"
      end
      # verify the required parameter 'bit_depth' is set
      if @api_client.config.client_side_validation && bit_depth.nil?
        fail ArgumentError, "Missing the required parameter 'bit_depth' when calling ImagingApi.modify_tiff"
      end
      # resource path
      local_var_path = '/imaging/{name}/tiff'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'bitDepth'] = bit_depth
      query_params[:'compression'] = opts[:'compression'] if !opts[:'compression'].nil?
      query_params[:'resolutionUnit'] = opts[:'resolution_unit'] if !opts[:'resolution_unit'].nil?
      query_params[:'horizontalResolution'] = opts[:'horizontal_resolution'] if !opts[:'horizontal_resolution'].nil?
      query_params[:'verticalResolution'] = opts[:'vertical_resolution'] if !opts[:'vertical_resolution'].nil?
      query_params[:'fromScratch'] = opts[:'from_scratch'] if !opts[:'from_scratch'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#modify_tiff\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update parameters of existing WEBP image.
    # @param name Filename of image.
    # @param loss_less If WEBP should be in lossless format.
    # @param quality Quality (0-100).
    # @param anim_loop_count The animation loop count.
    # @param anim_background_color Color of the animation background.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def modify_web_p(name, loss_less, quality, anim_loop_count, anim_background_color, opts = {})
      data, _status_code, _headers = modify_web_p_with_http_info(name, loss_less, quality, anim_loop_count, anim_background_color, opts)
      data
    end

    # Update parameters of existing WEBP image.
    # @param name Filename of image.
    # @param loss_less If WEBP should be in lossless format.
    # @param quality Quality (0-100).
    # @param anim_loop_count The animation loop count.
    # @param anim_background_color Color of the animation background.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def modify_web_p_with_http_info(name, loss_less, quality, anim_loop_count, anim_background_color, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.modify_web_p ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ImagingApi.modify_web_p"
      end
      # verify the required parameter 'loss_less' is set
      if @api_client.config.client_side_validation && loss_less.nil?
        fail ArgumentError, "Missing the required parameter 'loss_less' when calling ImagingApi.modify_web_p"
      end
      # verify the required parameter 'quality' is set
      if @api_client.config.client_side_validation && quality.nil?
        fail ArgumentError, "Missing the required parameter 'quality' when calling ImagingApi.modify_web_p"
      end
      # verify the required parameter 'anim_loop_count' is set
      if @api_client.config.client_side_validation && anim_loop_count.nil?
        fail ArgumentError, "Missing the required parameter 'anim_loop_count' when calling ImagingApi.modify_web_p"
      end
      # verify the required parameter 'anim_background_color' is set
      if @api_client.config.client_side_validation && anim_background_color.nil?
        fail ArgumentError, "Missing the required parameter 'anim_background_color' when calling ImagingApi.modify_web_p"
      end
      # resource path
      local_var_path = '/imaging/{name}/webp'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'lossLess'] = loss_less
      query_params[:'quality'] = quality
      query_params[:'animLoopCount'] = anim_loop_count
      query_params[:'animBackgroundColor'] = anim_background_color
      query_params[:'fromScratch'] = opts[:'from_scratch'] if !opts[:'from_scratch'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#modify_web_p\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Process existing WMF image using given parameters.
    # @param name Filename of image.
    # @param bk_color Color of the background.
    # @param page_width Width of the page.
    # @param page_height Height of the page.
    # @param border_x Border width.
    # @param border_y Border height.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @option opts [String] :format Export format (PNG is the default one). Please, refer to the export table from https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases. (default to png)
    # @return [File]
    def modify_wmf(name, bk_color, page_width, page_height, border_x, border_y, opts = {})
      data, _status_code, _headers = modify_wmf_with_http_info(name, bk_color, page_width, page_height, border_x, border_y, opts)
      data
    end

    # Process existing WMF image using given parameters.
    # @param name Filename of image.
    # @param bk_color Color of the background.
    # @param page_width Width of the page.
    # @param page_height Height of the page.
    # @param border_x Border width.
    # @param border_y Border height.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :from_scratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @option opts [String] :format Export format (PNG is the default one). Please, refer to the export table from https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def modify_wmf_with_http_info(name, bk_color, page_width, page_height, border_x, border_y, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.modify_wmf ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ImagingApi.modify_wmf"
      end
      # verify the required parameter 'bk_color' is set
      if @api_client.config.client_side_validation && bk_color.nil?
        fail ArgumentError, "Missing the required parameter 'bk_color' when calling ImagingApi.modify_wmf"
      end
      # verify the required parameter 'page_width' is set
      if @api_client.config.client_side_validation && page_width.nil?
        fail ArgumentError, "Missing the required parameter 'page_width' when calling ImagingApi.modify_wmf"
      end
      # verify the required parameter 'page_height' is set
      if @api_client.config.client_side_validation && page_height.nil?
        fail ArgumentError, "Missing the required parameter 'page_height' when calling ImagingApi.modify_wmf"
      end
      # verify the required parameter 'border_x' is set
      if @api_client.config.client_side_validation && border_x.nil?
        fail ArgumentError, "Missing the required parameter 'border_x' when calling ImagingApi.modify_wmf"
      end
      # verify the required parameter 'border_y' is set
      if @api_client.config.client_side_validation && border_y.nil?
        fail ArgumentError, "Missing the required parameter 'border_y' when calling ImagingApi.modify_wmf"
      end
      # resource path
      local_var_path = '/imaging/{name}/wmf'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'bkColor'] = bk_color
      query_params[:'pageWidth'] = page_width
      query_params[:'pageHeight'] = page_height
      query_params[:'borderX'] = border_x
      query_params[:'borderY'] = border_y
      query_params[:'fromScratch'] = opts[:'from_scratch'] if !opts[:'from_scratch'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#modify_wmf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Move file
    # @param src_path Source file path e.g. &#39;/src.ext&#39;
    # @param dest_path Destination file path e.g. &#39;/dest.ext&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :src_storage_name Source storage name
    # @option opts [String] :dest_storage_name Destination storage name
    # @option opts [String] :version_id File version ID to move
    # @return [nil]
    def move_file(src_path, dest_path, opts = {})
      move_file_with_http_info(src_path, dest_path, opts)
      nil
    end

    # Move file
    # @param src_path Source file path e.g. &#39;/src.ext&#39;
    # @param dest_path Destination file path e.g. &#39;/dest.ext&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :src_storage_name Source storage name
    # @option opts [String] :dest_storage_name Destination storage name
    # @option opts [String] :version_id File version ID to move
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def move_file_with_http_info(src_path, dest_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.move_file ...'
      end
      # verify the required parameter 'src_path' is set
      if @api_client.config.client_side_validation && src_path.nil?
        fail ArgumentError, "Missing the required parameter 'src_path' when calling ImagingApi.move_file"
      end
      # verify the required parameter 'dest_path' is set
      if @api_client.config.client_side_validation && dest_path.nil?
        fail ArgumentError, "Missing the required parameter 'dest_path' when calling ImagingApi.move_file"
      end
      # resource path
      local_var_path = '/imaging/storage/file/move/{srcPath}'.sub('{' + 'srcPath' + '}', src_path.to_s)

      # query parameters
      query_params = {}
      query_params[:'destPath'] = dest_path
      query_params[:'srcStorageName'] = opts[:'src_storage_name'] if !opts[:'src_storage_name'].nil?
      query_params[:'destStorageName'] = opts[:'dest_storage_name'] if !opts[:'dest_storage_name'].nil?
      query_params[:'versionId'] = opts[:'version_id'] if !opts[:'version_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#move_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Move folder
    # @param src_path Folder path to move e.g. &#39;/folder&#39;
    # @param dest_path Destination folder path to move to e.g &#39;/dst&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :src_storage_name Source storage name
    # @option opts [String] :dest_storage_name Destination storage name
    # @return [nil]
    def move_folder(src_path, dest_path, opts = {})
      move_folder_with_http_info(src_path, dest_path, opts)
      nil
    end

    # Move folder
    # @param src_path Folder path to move e.g. &#39;/folder&#39;
    # @param dest_path Destination folder path to move to e.g &#39;/dst&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :src_storage_name Source storage name
    # @option opts [String] :dest_storage_name Destination storage name
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def move_folder_with_http_info(src_path, dest_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.move_folder ...'
      end
      # verify the required parameter 'src_path' is set
      if @api_client.config.client_side_validation && src_path.nil?
        fail ArgumentError, "Missing the required parameter 'src_path' when calling ImagingApi.move_folder"
      end
      # verify the required parameter 'dest_path' is set
      if @api_client.config.client_side_validation && dest_path.nil?
        fail ArgumentError, "Missing the required parameter 'dest_path' when calling ImagingApi.move_folder"
      end
      # resource path
      local_var_path = '/imaging/storage/folder/move/{srcPath}'.sub('{' + 'srcPath' + '}', src_path.to_s)

      # query parameters
      query_params = {}
      query_params[:'destPath'] = dest_path
      query_params[:'srcStorageName'] = opts[:'src_storage_name'] if !opts[:'src_storage_name'].nil?
      query_params[:'destStorageName'] = opts[:'dest_storage_name'] if !opts[:'dest_storage_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#move_folder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Check if file or folder exists
    # @param path File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @option opts [String] :version_id File version ID
    # @return [ObjectExist]
    def object_exists(path, opts = {})
      data, _status_code, _headers = object_exists_with_http_info(path, opts)
      data
    end

    # Check if file or folder exists
    # @param path File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @option opts [String] :version_id File version ID
    # @return [Array<(ObjectExist, Fixnum, Hash)>] ObjectExist data, response status code and response headers
    def object_exists_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.object_exists ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ImagingApi.object_exists"
      end
      # resource path
      local_var_path = '/imaging/storage/exist/{path}'.sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = {}
      query_params[:'storageName'] = opts[:'storage_name'] if !opts[:'storage_name'].nil?
      query_params[:'versionId'] = opts[:'version_id'] if !opts[:'version_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ObjectExist')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#object_exists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resize an existing image.
    # @param name Filename of an image.
    # @param format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
    # @param new_width New width.
    # @param new_height New height.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def resize_image(name, format, new_width, new_height, opts = {})
      data, _status_code, _headers = resize_image_with_http_info(name, format, new_width, new_height, opts)
      data
    end

    # Resize an existing image.
    # @param name Filename of an image.
    # @param format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
    # @param new_width New width.
    # @param new_height New height.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def resize_image_with_http_info(name, format, new_width, new_height, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.resize_image ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ImagingApi.resize_image"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling ImagingApi.resize_image"
      end
      # verify the required parameter 'new_width' is set
      if @api_client.config.client_side_validation && new_width.nil?
        fail ArgumentError, "Missing the required parameter 'new_width' when calling ImagingApi.resize_image"
      end
      # verify the required parameter 'new_height' is set
      if @api_client.config.client_side_validation && new_height.nil?
        fail ArgumentError, "Missing the required parameter 'new_height' when calling ImagingApi.resize_image"
      end
      # resource path
      local_var_path = '/imaging/{name}/resize'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'format'] = format
      query_params[:'newWidth'] = new_width
      query_params[:'newHeight'] = new_height
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#resize_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Rotate and/or flip an existing image.
    # @param name Filename of an image.
    # @param format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
    # @param method RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def rotate_flip_image(name, format, method, opts = {})
      data, _status_code, _headers = rotate_flip_image_with_http_info(name, format, method, opts)
      data
    end

    # Rotate and/or flip an existing image.
    # @param name Filename of an image.
    # @param format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
    # @param method RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def rotate_flip_image_with_http_info(name, format, method, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.rotate_flip_image ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ImagingApi.rotate_flip_image"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling ImagingApi.rotate_flip_image"
      end
      # verify the required parameter 'method' is set
      if @api_client.config.client_side_validation && method.nil?
        fail ArgumentError, "Missing the required parameter 'method' when calling ImagingApi.rotate_flip_image"
      end
      # resource path
      local_var_path = '/imaging/{name}/rotateflip'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'format'] = format
      query_params[:'method'] = method
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#rotate_flip_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export existing image to another format.
    # @param name Filename of image.
    # @param format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def save_image_as(name, format, opts = {})
      data, _status_code, _headers = save_image_as_with_http_info(name, format, opts)
      data
    end

    # Export existing image to another format.
    # @param name Filename of image.
    # @param format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def save_image_as_with_http_info(name, format, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.save_image_as ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ImagingApi.save_image_as"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling ImagingApi.save_image_as"
      end
      # resource path
      local_var_path = '/imaging/{name}/saveAs'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'format'] = format
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#save_image_as\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Check if storage exists
    # @param storage_name Storage name
    # @param [Hash] opts the optional parameters
    # @return [StorageExist]
    def storage_exists(storage_name, opts = {})
      data, _status_code, _headers = storage_exists_with_http_info(storage_name, opts)
      data
    end

    # Check if storage exists
    # @param storage_name Storage name
    # @param [Hash] opts the optional parameters
    # @return [Array<(StorageExist, Fixnum, Hash)>] StorageExist data, response status code and response headers
    def storage_exists_with_http_info(storage_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.storage_exists ...'
      end
      # verify the required parameter 'storage_name' is set
      if @api_client.config.client_side_validation && storage_name.nil?
        fail ArgumentError, "Missing the required parameter 'storage_name' when calling ImagingApi.storage_exists"
      end
      # resource path
      local_var_path = '/imaging/storage/{storageName}/exist'.sub('{' + 'storageName' + '}', storage_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StorageExist')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#storage_exists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Perform scaling, cropping and flipping of an existing image in a single request.
    # @param name Filename of an image.
    # @param format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
    # @param new_width New width of the scaled image.
    # @param new_height New height of the scaled image.
    # @param x X position of start point for cropping rectangle.
    # @param y Y position of start point for cropping rectangle.
    # @param rect_width Width of cropping rectangle.
    # @param rect_height Height of cropping rectangle.
    # @param rotate_flip_method RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY). Default is RotateNoneFlipNone.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [File]
    def update_image(name, format, new_width, new_height, x, y, rect_width, rect_height, rotate_flip_method, opts = {})
      data, _status_code, _headers = update_image_with_http_info(name, format, new_width, new_height, x, y, rect_width, rect_height, rotate_flip_method, opts)
      data
    end

    # Perform scaling, cropping and flipping of an existing image in a single request.
    # @param name Filename of an image.
    # @param format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
    # @param new_width New width of the scaled image.
    # @param new_height New height of the scaled image.
    # @param x X position of start point for cropping rectangle.
    # @param y Y position of start point for cropping rectangle.
    # @param rect_width Width of cropping rectangle.
    # @param rect_height Height of cropping rectangle.
    # @param rotate_flip_method RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY). Default is RotateNoneFlipNone.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Folder with image to process.
    # @option opts [String] :storage Your Aspose Cloud Storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def update_image_with_http_info(name, format, new_width, new_height, x, y, rect_width, rect_height, rotate_flip_method, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.update_image ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ImagingApi.update_image"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling ImagingApi.update_image"
      end
      # verify the required parameter 'new_width' is set
      if @api_client.config.client_side_validation && new_width.nil?
        fail ArgumentError, "Missing the required parameter 'new_width' when calling ImagingApi.update_image"
      end
      # verify the required parameter 'new_height' is set
      if @api_client.config.client_side_validation && new_height.nil?
        fail ArgumentError, "Missing the required parameter 'new_height' when calling ImagingApi.update_image"
      end
      # verify the required parameter 'x' is set
      if @api_client.config.client_side_validation && x.nil?
        fail ArgumentError, "Missing the required parameter 'x' when calling ImagingApi.update_image"
      end
      # verify the required parameter 'y' is set
      if @api_client.config.client_side_validation && y.nil?
        fail ArgumentError, "Missing the required parameter 'y' when calling ImagingApi.update_image"
      end
      # verify the required parameter 'rect_width' is set
      if @api_client.config.client_side_validation && rect_width.nil?
        fail ArgumentError, "Missing the required parameter 'rect_width' when calling ImagingApi.update_image"
      end
      # verify the required parameter 'rect_height' is set
      if @api_client.config.client_side_validation && rect_height.nil?
        fail ArgumentError, "Missing the required parameter 'rect_height' when calling ImagingApi.update_image"
      end
      # verify the required parameter 'rotate_flip_method' is set
      if @api_client.config.client_side_validation && rotate_flip_method.nil?
        fail ArgumentError, "Missing the required parameter 'rotate_flip_method' when calling ImagingApi.update_image"
      end
      # resource path
      local_var_path = '/imaging/{name}/updateImage'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'format'] = format
      query_params[:'newWidth'] = new_width
      query_params[:'newHeight'] = new_height
      query_params[:'x'] = x
      query_params[:'y'] = y
      query_params[:'rectWidth'] = rect_width
      query_params[:'rectHeight'] = rect_height
      query_params[:'rotateFlipMethod'] = rotate_flip_method
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#update_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update images features in search context. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param search_context_id The search context identifier.
    # @param image_id The image identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image_data Input image
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [nil]
    def update_image_features(search_context_id, image_id, opts = {})
      update_image_features_with_http_info(search_context_id, image_id, opts)
      nil
    end

    # Update images features in search context. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param search_context_id The search context identifier.
    # @param image_id The image identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image_data Input image
    # @option opts [String] :folder The folder.
    # @option opts [String] :storage The storage.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_image_features_with_http_info(search_context_id, image_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.update_image_features ...'
      end
      # verify the required parameter 'search_context_id' is set
      if @api_client.config.client_side_validation && search_context_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_context_id' when calling ImagingApi.update_image_features"
      end
      # verify the required parameter 'image_id' is set
      if @api_client.config.client_side_validation && image_id.nil?
        fail ArgumentError, "Missing the required parameter 'image_id' when calling ImagingApi.update_image_features"
      end
      # resource path
      local_var_path = '/imaging/ai/imageSearch/{searchContextId}/features'.sub('{' + 'searchContextId' + '}', search_context_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'imageId'] = image_id
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = opts[:'image_data'] if !opts[:'image_data'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#update_image_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update image and images features in search context. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param search_context_id Search context identifier.
    # @param image_id Image identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image_data Input image
    # @option opts [String] :folder Folder.
    # @option opts [String] :storage Storage
    # @return [nil]
    def update_search_image(search_context_id, image_id, opts = {})
      update_search_image_with_http_info(search_context_id, image_id, opts)
      nil
    end

    # Update image and images features in search context. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.
    # @param search_context_id Search context identifier.
    # @param image_id Image identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image_data Input image
    # @option opts [String] :folder Folder.
    # @option opts [String] :storage Storage
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_search_image_with_http_info(search_context_id, image_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.update_search_image ...'
      end
      # verify the required parameter 'search_context_id' is set
      if @api_client.config.client_side_validation && search_context_id.nil?
        fail ArgumentError, "Missing the required parameter 'search_context_id' when calling ImagingApi.update_search_image"
      end
      # verify the required parameter 'image_id' is set
      if @api_client.config.client_side_validation && image_id.nil?
        fail ArgumentError, "Missing the required parameter 'image_id' when calling ImagingApi.update_search_image"
      end
      # resource path
      local_var_path = '/imaging/ai/imageSearch/{searchContextId}/image'.sub('{' + 'searchContextId' + '}', search_context_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'imageId'] = image_id
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['imageData'] = opts[:'image_data'] if !opts[:'image_data'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#update_search_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload file
    # @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.             
    # @param file File to upload
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @return [FilesUploadResult]
    def upload_file(path, file, opts = {})
      data, _status_code, _headers = upload_file_with_http_info(path, file, opts)
      data
    end

    # Upload file
    # @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.             
    # @param file File to upload
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @return [Array<(FilesUploadResult, Fixnum, Hash)>] FilesUploadResult data, response status code and response headers
    def upload_file_with_http_info(path, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagingApi.upload_file ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ImagingApi.upload_file"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling ImagingApi.upload_file"
      end
      # resource path
      local_var_path = '/imaging/storage/file/{path}'.sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = {}
      query_params[:'storageName'] = opts[:'storage_name'] if !opts[:'storage_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['File'] = file

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FilesUploadResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagingApi#upload_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
